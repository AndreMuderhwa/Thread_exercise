// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

//Application

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  username String
  bio      String?
  link     String?
  followers     Follow[] @relation("follower")
  followeds     Follow[] @relation("followed")
  posts         Post[]
  likes         Like[]

  @@map(name: "users")
}
model Post{
  id        String @id @default(cuid())
  content String
  parentId String?
  userId String
  createdAt DateTime @default(now())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  likes Like[]
  replies Post[] @relation("comments")
  parent Post? @relation("comments", fields: [parentId], references:[id], onDelete: Cascade)
}

model Like{
  id String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references:[id], onDelete: Cascade)

}

model Follow{
  id          String @id @default(cuid())
  followerId String
  followingId String
  createdAt DateTime @default(now())
  follower User @relation("follower",fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("followed",fields: [followerId], references: [id], onDelete: Cascade)

}
